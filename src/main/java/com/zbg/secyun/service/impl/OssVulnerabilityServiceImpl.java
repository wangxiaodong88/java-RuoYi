package com.zbg.secyun.service.impl;

import com.zbg.secyun.domain.OssVulnerabilityExample;
import com.zbg.secyun.domain.OssVulnerabilityWithBLOBs;
import com.zbg.secyun.mapper.OssVulnerabilityMapper;
import com.zbg.secyun.service.OssVulnerabilityService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Slf4j
public class OssVulnerabilityServiceImpl implements OssVulnerabilityService {

    @Autowired
    private OssVulnerabilityMapper mapper;

    @Override
    public int insert(OssVulnerabilityWithBLOBs vulnerability) {
        return mapper.insertSelective(vulnerability);
    }

    @Override
    public int update(OssVulnerabilityWithBLOBs vulnerability) {
        return mapper.updateByPrimaryKeySelective(vulnerability);
    }

    @Override
    public int saveByCnnvdNo(OssVulnerabilityWithBLOBs vulnerability) {
        // 查询数据库中是否存在需要保存的漏洞信息，通过cnnvd编号查找
        OssVulnerabilityExample ex = new OssVulnerabilityExample();
        OssVulnerabilityExample.Criteria criteria = ex.createCriteria();
        criteria.andCnnvdNoEqualTo(vulnerability.getCnnvdNo());
        List<OssVulnerabilityWithBLOBs> cnnvds = mapper.selectByExampleWithBLOBs(ex);
        return save(vulnerability, cnnvds);
    }

    @Override
    public int saveByCveNo(OssVulnerabilityWithBLOBs vulnerability) {
        // 查询数据库中是否存在需要保存的漏洞信息，通过cnnvd编号查找
        OssVulnerabilityExample ex = new OssVulnerabilityExample();
        OssVulnerabilityExample.Criteria criteria = ex.createCriteria();
        criteria.andCveNoEqualTo(vulnerability.getCveNo());
        List<OssVulnerabilityWithBLOBs> cves = mapper.selectByExampleWithBLOBs(ex);

        return save(vulnerability, cves);
    }

    @Override
    public int selectVulnIdByCnnvdNo(String cnnvdNo) {
        log.info("通过cnnvd编号查找cnnvd的漏洞表id");
        OssVulnerabilityExample ex = new OssVulnerabilityExample();
        OssVulnerabilityExample.Criteria criteria = ex.createCriteria();
        criteria.andCnnvdNoEqualTo(cnnvdNo);
        List<OssVulnerabilityWithBLOBs> vulnList = mapper.selectByExampleWithBLOBs(ex);
        if(vulnList.size()>0){
            return mapper.selectByExampleWithBLOBs(ex).get(0).getId();
        }
        return 0;
    }


    private int save(OssVulnerabilityWithBLOBs vulnerability, List<OssVulnerabilityWithBLOBs> list) {
        if (list.size() != 0) {
            // 漏洞信息已经存在，更新即可
            vulnerability.setId(list.get(0).getId());
            return update(vulnerability);
        } else {
            // 漏洞信息不存在，需添加
            return insert(vulnerability);
        }
    }


}
